<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameLower = className?uncap_first> 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<#macro namespace>${className}.</#macro>

<!-- 不使用namespace是由于sql搜索定位会比较方便 -->
<sqlMap>

    <resultMap id="RM.${className}" class="${basepackage}.model.${className}">
        <#list table.columns as column>
        <#if column.defineForeignInfo>
        <result property="${column.columnNameLower}" column="${column.sqlName}"/>
        <result property="${column.columnNameLower}Txt" column="${column.foreingTextColumn}"/>
        <#else>
         <result property="${column.columnNameLower}" column="${column.sqlName}"/>
        </#if>
		</#list>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="<@namespace/>columns">
	    <![CDATA[
        <#list table.columns as column> ${table.tableSqlSearchAlias}.${column.sqlName} <#if column_has_next>,</#if></#list> <#if (table.leftJoinSelectColumns?size>0)><#list table.leftJoinSelectColumns as leftJoinSelectColumn>, ${leftJoinSelectColumn.joinTable.tableSqlSearchAlias}.${leftJoinSelectColumn.column.sqlName} as ${leftJoinSelectColumn.joinTable.tableSqlSearchAlias}_${leftJoinSelectColumn.column.columnNameLowerCase}</#list></#if>
        
	    ]]>
	</sql>
	
    <insert id="<@namespace/>insert" >
    <![CDATA[
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	${column.sqlName} <#if column_has_next>,</#if>
        </#list>
        ) VALUES (
        <#list table.columns as column>
        	#${column.columnNameLower}# <#if column_has_next>,</#if>
        </#list>        
        )
    ]]>
    <!--
    mysql:		type="post" SELECT  select last_insert_id()
    sqlserver:	type="post" SELECT  @@identity  AS  ID
    oracle:		type="pre" 	SELECT  sequenceName.nextval AS ID FROM DUAL
    DB2:		type="pre"	values nextval for sequenceName
    -->
        <selectKey resultClass="java.lang.Long" type="post" keyProperty="<#list table.columns as column><#if column.pk>${column.columnNameLower}</#if></#list>" >
            select last_insert_id()
        </selectKey>
    </insert>

    <update id="<@namespace/>update" >
    <![CDATA[
        UPDATE ${table.sqlName} SET
	        <#list table.notPkColumns as column>
	        ${column.sqlName} = #${column.columnNameLower}# <#if column_has_next>,</#if>
	        </#list>
        WHERE 
        	<#list table.compositeIdColumns as column>
	        ${column.sqlName} = #${column.columnNameLower}# <#if column_has_next> AND </#if>
	        </#list>
    ]]>
    </update>

    <delete id="<@namespace/>delete">
    <![CDATA[
        DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = #${column.columnNameLower}# <#if column_has_next> AND </#if>
		</#list>
    ]]>
    </delete>
    
    <select id="<@namespace/>getById" resultMap="RM.${className}">
	    SELECT <include refid="<@namespace/>columns"/>
	    <![CDATA[
	        FROM ${table.sqlName} AS ${table.tableSqlSearchAlias} <#if (table.leftJoins?size>0)><#list table.leftJoins as leftJoin>  Left Join ${leftJoin.table.sqlName} AS ${leftJoin.table.tableSqlSearchAlias} ON ${table.tableSqlSearchAlias}.${leftJoin.leftColumn.sqlName}=${leftJoin.table.tableSqlSearchAlias}.${leftJoin.rightColumn.sqlName}</#list></#if>
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${table.tableSqlSearchAlias}.${column.sqlName} = #${column.columnNameLower}# <#if column_has_next> AND </#if>
		        </#list>
	    ]]>
    </select>

	<sql id="<@namespace/>findPage.where">
	    <dynamic prepend="WHERE">
	       <#list table.columns as column>
		        <#if column.isDateTimeColumn>
		       <isNotEmpty prepend="AND" property="${column.columnNameLower}Begin">
		              ${table.tableSqlSearchAlias}.${column.sqlName} >= #${column.columnNameLower}Begin#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="${column.columnNameLower}End">
		              ${table.tableSqlSearchAlias}.${column.sqlName} &lt;= #${column.columnNameLower}End#
		       </isNotEmpty>
		       <#elseif column.enumType>
		       <isNotEqual	prepend="AND" property="${column.columnNameLower}" compareValue="${column.enumOtherVal}">  ${table.tableSqlSearchAlias}.${column.sqlName} = #${column.columnNameLower}#</isNotEqual>	
				<#else>
		       <isNotEmpty prepend="AND" property="${column.columnNameLower}">
		              ${table.tableSqlSearchAlias}.${column.sqlName} = #${column.columnNameLower}#
		       </isNotEmpty>
				</#if>
	       </#list>
	       <#if (table.searchableColumnFromForeignInfo?size>0)>
	       	   <isNotEmpty prepend="AND" property="searchTerm">
	        	<#list table.searchableColumnFromForeignInfo as foreignColumn><#if foreignColumn_index==0>(</#if>  ${table.tableSqlSearchAlias}.${foreignColumn.sqlName} like '%$searchTerm$%' <#if foreignColumn_has_next>or</#if> <#if foreignColumn_index==((table.searchableColumnFromForeignInfo?size)-1)> )</#if></#list>
	           </isNotEmpty>
	       </#if>
	    </dynamic>	
	</sql>
	 
    <select id="<@namespace/>findPage.count" resultClass="long">
        SELECT count(*) FROM  ${table.sqlName} AS ${table.tableSqlSearchAlias} <include refid="<@namespace/>findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="<@namespace/>findPage" resultMap="RM.${className}">
    	SELECT <include refid="<@namespace/>columns"/> FROM ${table.sqlName} AS ${table.tableSqlSearchAlias} <#if (table.leftJoins?size>0)><#list table.leftJoins as leftJoin>  Left Join ${leftJoin.table.sqlName} AS ${leftJoin.table.tableSqlSearchAlias} ON ${table.tableSqlSearchAlias}.${leftJoin.leftColumn.sqlName}=${leftJoin.table.tableSqlSearchAlias}.${leftJoin.rightColumn.sqlName}</#list></#if>
		<include refid="<@namespace/>findPage.where"/>
		<isNotEmpty property="sortColumns">
			ORDER BY ${table.tableSqlSearchAlias}.$sortColumns$
		</isNotEmpty>
    </select>

    <#list table.columns as column>
    <#if column.unique && !column.pk>
    <select id="<@namespace/>getBy${column.columnName}" resultMap="RM.${className}" >
	    SELECT <include refid="<@namespace/>columns"/>
	    <![CDATA[
	        FROM ${table.sqlName} WHERE ${column.sqlName} = #${column.columnNameLower}#
	    ]]>
    </select>
    
    </#if>
	</#list>
	
</sqlMap>

